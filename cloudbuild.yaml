substitutions:
  _REGION: "us-central1"
  _SERVICE: "db-frontend-2-cicd"
  _REPO_NAME: "db-frontend-2-cicd-repo"
  _REPO_NPM_NAME: "npm-virtual"
  _PRIVATEPOOL_ID: "private-pool-test"
  _PROJECT_ID: "diegoayala-dev"

options:
  logging: CLOUD_LOGGING_ONLY
  pool:
    name: "projects/${_PROJECT_ID}/locations/${_REGION}/workerPools/${_PRIVATEPOOL_ID}"

steps:
  # 1. Install dependencies using the official Node image
  # This step replaces the broken custom builder.
  - name: "node:20-slim"
    id: "Install Dependencies"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        # Generate the real .npmrc file from the template
        sed -e "s|__REGION__|${_REGION}|g" \
            -e "s|__NPM_REPO_NAME__|${_REPO_NPM_NAME}|g" \
            -e "s|__PROJECT_ID__|${_PROJECT_ID}|g" \
            .npmrc.template > .npmrc
        
        # Install and then immediately run the auth helper
        npm install -g google-artifactregistry-auth
        /usr/local/bin/google-artifactregistry-auth --repo-config=.npmrc

        # Install all dependencies into the /workspace directory
        npm ci --prefix /workspace

  # 2. Copy source code into the workspace
  - name: "gcr.io/cloud-builders/gcloud"
    id: "Copy Source"
    entrypoint: "bash"
    args: ["-c", "cp -r . /workspace"]

  # 3. Run tests inside the workspace
  - name: "node:20-slim" # Use the official Node image for consistency
    id: "Test"
    entrypoint: "npm"
    args: ["--prefix", "/workspace", "test", "--", "--ci"]
    
  # 4. Prune development dependencies
  - name: "node:20-slim" # Use the official Node image for consistency
    id: "Prune Dev Dependencies"
    entrypoint: "npm"
    args: ["--prefix", "/workspace", "prune", "--production"]

  # 5. Package the workspace into a container image
  - name: "gcr.io/cloud-builders/gcloud"
    id: "Package Image"
    args:
      - "builds"
      - "submit"
      - "/workspace"
      - "--tag"
      - "${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO_NAME}/${_SERVICE}:${SHORT_SHA}"
      - "--no-source"
      - "--entrypoint=node index.js"

  # 6. Deploy to Cloud Run
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    id: "Deploy to Cloud Run"
    entrypoint: gcloud
    args:
      [
        "run", "deploy", "$_SERVICE",
        "--image", "${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO_NAME}/${_SERVICE}:${SHORT_SHA}",
        "--region", "$_REGION",
        "--platform", "managed",
        "--allow-unauthenticated",
        "--service-account", "db-psql-service-account@${_PROJECT_ID}.iam.gserviceaccount.com",
        "--set-env-vars", "INSTANCE_CONNECTION_NAME=diegoayala-dev:us-central1:psql-test,DB_USER=db-psql-service-account@diegoayala-dev.iam,DB_NAME=psql-test_db",
        "--network", "directvpc-test",
        "--subnet", "directvpc-subnet-test",
        "--vpc-egress", "all-traffic"
      ]

images:
  - "${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO_NAME}/${_SERVICE}:${SHORT_SHA}"