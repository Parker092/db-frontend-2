substitutions:
  _REGION: "us-central1"
  _SERVICE: "db-frontend-2-cicd"
  _REPO_NAME: "db-frontend-2-cicd-repo"
  _REPO_NPM_NAME: "npm-virtual"
  _PRIVATEPOOL_ID: "private-pool-test"

options:
  logging: CLOUD_LOGGING_ONLY
  substitutionOption: ALLOW_LOOSE
  pool:
    name: "projects/$PROJECT_ID/locations/$_REGION/workerPools/$_PRIVATEPOOL_ID"

steps:
  # 1. Generate config, authenticate, and install dependencies
  - name: "${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPO_NAME}/npm-builder:latest"
    id: "Install Dependencies"
    entrypoint: "bash"
    # Make PROJECT_ID available to the shell script
    env:
      - 'PROJECT_ID=${PROJECT_ID}'
    args:
      - "-c"
      - |
        # Generate the real .npmrc file from the template and substitutions
        # Use a different delimiter like '|' for sed to handle URLs correctly
        sed -e "s|__REGION__|${_REGION}|g" \
            -e "s|__NPM_REPO_NAME__|${_REPO_NPM_NAME}|g" \
            -e "s|\$${PROJECT_ID}|${PROJECT_ID}|g" \
            .npmrc.template > .npmrc

        # Authenticate using the newly created .npmrc
        google-artifactregistry-auth --repo-config=.npmrc

        # Install ALL dependencies into the /workspace directory
        npm ci --prefix /workspace

  # 2. Copy source code into the workspace
  - name: "gcr.io/cloud-builders/gcloud"
    id: "Copy Source"
    entrypoint: "bash"
    args: ["-c", "cp -r . /workspace"]

  # 3. Run tests inside the workspace
  - name: "gcr.io/cloud-builders/npm"
    id: "Test"
    args: ["--prefix", "/workspace", "test", "--", "--ci"]

  # 4. Prune development dependencies to keep the final image small
  - name: "gcr.io/cloud-builders/npm"
    id: "Prune Dev Dependencies"
    args: ["--prefix", "/workspace", "prune", "--production"]

  # 5. Package the workspace into a container image using Buildpacks
  - name: "gcr.io/cloud-builders/gcloud"
    id: "Package Image"
    args:
      - "builds"
      - "submit"
      - "/workspace" # The directory to package
      - "--tag"
      - "${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPO_NAME}/${_SERVICE}:${SHORT_SHA}"
      - "--no-source" # Crucial flag: tells it to use the directory we provide
      - "--entrypoint=node index.js" # Defines the start command for your container

  # 6. Deploy to Cloud Run
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    id: "Deploy to Cloud Run"
    entrypoint: gcloud
    args:
      [
        "run",
        "deploy",
        "$_SERVICE",
        "--image",
        "${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPO_NAME}/${_SERVICE}:${SHORT_SHA}",
        "--region",
        "$_REGION",
        "--platform",
        "managed",
        "--allow-unauthenticated",
        "--service-account",
        "db-psql-service-account@${PROJECT_ID}.iam.gserviceaccount.com",
        "--set-env-vars",
        "INSTANCE_CONNECTION_NAME=diegoayala-dev:us-central1:psql-test,DB_USER=db-psql-service-account@diegoayala-dev.iam,DB_NAME=psql-test_db",
        "--network",
        "directvpc-test",
        "--subnet",
        "directvpc-subnet-test",
        "--vpc-egress",
        "all-traffic",
      ]

images:
  - "${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPO_NAME}/${_SERVICE}:${SHORT_SHA}"
