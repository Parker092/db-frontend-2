substitutions:
  _REGION: "us-central1"
  _SERVICE: "db-frontend-2-cicd"
  _REPO_NAME: "db-frontend-2-cicd-repo"
  _PRIVATEPOOL_ID: "private-pool-test"
  _PROJECT_ID: "diegoayala-dev"

options:
  logging: CLOUD_LOGGING_ONLY
  pool:
    name: "projects/${_PROJECT_ID}/locations/${_REGION}/workerPools/${_PRIVATEPOOL_ID}"

steps:
  # 1. Run tests using the existing node_modules
  # This now runs in the root of your checked-out source code.
  - name: "node:20-slim"
    id: "Test"
    entrypoint: "npm"
    args: ["test", "--", "--ci"]

  # 2. Package the entire source directory into a container image
  - name: "gcr.io/cloud-builders/gcloud"
    id: "Package Image"
    args:
      - "builds"
      - "submit"
      - "." # Package the current directory
      - "--tag"
      - "${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO_NAME}/${_SERVICE}:${SHORT_SHA}"

  # 3. Deploy to Cloud Run
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    id: "Deploy to Cloud Run"
    entrypoint: gcloud
    args:
      [
        "run",
        "deploy",
        "$_SERVICE",
        "--image",
        "${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO_NAME}/${_SERVICE}:${SHORT_SHA}",
        "--region",
        "$_REGION",
        "--platform",
        "managed",
        "--allow-unauthenticated",
        "--service-account",
        "db-psql-service-account@${_PROJECT_ID}.iam.gserviceaccount.com",
        "--set-env-vars",
        "INSTANCE_CONNECTION_NAME=diegoayala-dev:us-central1:psql-test,DB_USER=db-psql-service-account@diegoayala-dev.iam,DB_NAME=psql-test_db",
        "--network",
        "directvpc-test",
        "--subnet",
        "directvpc-subnet-test",
        "--vpc-egress",
        "all-traffic",
      ]

images:
  - "${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO_NAME}/${_SERVICE}:${SHORT_SHA}"
