# substitutions:
#   _REGION: "us-central1"
#   _SERVICE: "db-frontend-2-cicd"
#   _REPO_NAME: "db-frontend-2-cicd-repo"
#   _PRIVATEPOOL_ID: "private-pool-test"

# options:
#   logging: CLOUD_LOGGING_ONLY
#   substitutionOption: ALLOW_LOOSE
#   pool:
#     name: 'projects/$PROJECT_ID/locations/$_REGION/workerPools/$_PRIVATEPOOL_ID'

# steps:
#   # # Install deps & run tests
#   # - name: gcr.io/cloud-builders/npm
#   #   id: "Install"
#   #   args: ["ci"]

#   - name: gcr.io/cloud-builders/npm
#     id: "Test"
#     args: ["test", "--", "--ci"]

#   # Build container
#   - name: gcr.io/cloud-builders/docker
#     id: "Build image"
#     args:
#       [
#         "build",
#         "-t",
#         "$_REGION-docker.pkg.dev/$PROJECT_ID/$_REPO_NAME/$_SERVICE:$SHORT_SHA",
#         ".",
#       ]

#   # Push container
#   - name: gcr.io/cloud-builders/docker
#     id: "Push image"
#     args:
#       [
#         "push",
#         "$_REGION-docker.pkg.dev/$PROJECT_ID/$_REPO_NAME/$_SERVICE:$SHORT_SHA",
#       ]

#   # Deploy to Cloud Run
#   - name: gcr.io/google.com/cloudsdktool/cloud-sdk
#     id: "Deploy to Cloud Run"
#     entrypoint: gcloud
#     args:
#       [
#         "run", "deploy", "$_SERVICE",
#         "--image", "$_REGION-docker.pkg.dev/$PROJECT_ID/$_REPO_NAME/$_SERVICE:$SHORT_SHA",
#         "--region", "$_REGION",
#         "--platform", "managed",
#         "--allow-unauthenticated",
#         "--service-account", "db-psql-service-account@${PROJECT_ID}.iam.gserviceaccount.com",
#         "--set-env-vars", "INSTANCE_CONNECTION_NAME=diegoayala-dev:us-central1:psql-test,DB_USER=db-psql-service-account@diegoayala-dev.iam,DB_NAME=psql-test_db",
#         "--network", "directvpc-test",
#         "--subnet", "directvpc-subnet-test",
#         "--vpc-egress", "all-traffic",
#       ]

# images:
#   - "$_REGION-docker.pkg.dev/$PROJECT_ID/$_REPO_NAME/$_SERVICE:$SHORT_SHA"

substitutions:
  _REGION: "us-central1"
  _SERVICE: "db-frontend-2-cicd"
  _REPO_NAME: "db-frontend-2-cicd-repo"
  _PRIVATEPOOL_ID: "private-pool-test"

options:
  logging: CLOUD_LOGGING_ONLY
  substitutionOption: ALLOW_LOOSE
  pool:
    name: 'projects/$PROJECT_ID/locations/$_REGION/workerPools/$_PRIVATEPOOL_ID'

steps:
  # 1. NEW STEP: Authenticate and install dependencies from Artifact Registry
  - name: 'gcr.io/cloud-builders/npm'
    id: "Authenticate and Install Dependencies"
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Copy the project's .npmrc file so the build knows where the private repo is
        cp .npmrc .

        # Install the authentication helper
        npm install google-artifactregistry-auth

        # Authenticate with Artifact Registry using the build's service account
        npx google-artifactregistry-auth --repo-config=.npmrc

        # Install dependencies using the lock file for consistency
        # This will securely fetch private packages from your Artifact Registry
        npm ci

  # 2. Run tests on the installed dependencies
  - name: gcr.io/cloud-builders/npm
    id: "Test"
    args: ["test", "--", "--ci"]

  # 3. Build container image
  - name: gcr.io/cloud-builders/docker
    id: "Build image"
    args:
      [
        "build",
        "-t",
        "$_REGION-docker.pkg.dev/$PROJECT_ID/$_REPO_NAME/$_SERVICE:$SHORT_SHA",
        ".",
      ]

  # 4. Push container image to Artifact Registry
  - name: gcr.io/cloud-builders/docker
    id: "Push image"
    args:
      [
        "push",
        "$_REGION-docker.pkg.dev/$PROJECT_ID/$_REPO_NAME/$_SERVICE:$SHORT_SHA",
      ]

  # 5. Deploy to Cloud Run
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk
    id: "Deploy to Cloud Run"
    entrypoint: gcloud
    args:
      [
        "run", "deploy", "$_SERVICE",
        "--image", "$_REGION-docker.pkg.dev/$PROJECT_ID/$_REPO_NAME/$_SERVICE:$SHORT_SHA",
        "--region", "$_REGION",
        "--platform", "managed",
        "--allow-unauthenticated",
        "--service-account", "db-psql-service-account@${PROJECT_ID}.iam.gserviceaccount.com",
        "--set-env-vars", "INSTANCE_CONNECTION_NAME=diegoayala-dev:us-central1:psql-test,DB_USER=db-psql-service-account@diegoayala-dev.iam,DB_NAME=psql-test_db",
        "--network", "directvpc-test",
        "--subnet", "directvpc-subnet-test",
        "--vpc-egress", "all-traffic",
      ]

images:
  - "$_REGION-docker.pkg.dev/$PROJECT_ID/$_REPO_NAME/$_SERVICE:$SHORT_SHA"